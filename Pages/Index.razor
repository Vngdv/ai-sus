@page "/"
@using ImageSus.Data;
@inject ImageService ImageService;

<div class="page">
    <div class="container">
        <h1 class="find-titel">Find the Fake</h1>
        <div class="find-grid" >
            @foreach (var image in @images)
            {
                <img @onload="@(() => HandleImageLoad(image))" alt="hmm" src="@image.Link" class="@(allImagesLoaded ? "" : "img-hidden")">
            }
        </div>
        <button @onclick="Reload" class="button">Refresh</button>
    </div>
</div>

@code {
    private Image[]? images = new Image[]{};
    private Image[] loadedImages = new Image[]{};
    private bool allImagesLoaded = false;

    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    private async Task Reload()
    {
        // Clear loaded images
        loadedImages = new Image[]{};
        allImagesLoaded = false;

        var realImages = await ImageService.GetImageAsync(count: 8, isSus: false);
        var susImages = await ImageService.GetImageAsync(count: 1, isSus: true);
        images = realImages.Concat(susImages).ToArray();
        var rng = new Random();
        images = realImages
            .Concat(susImages)
            .OrderBy(_ => rng.Next())
            .ToArray();

        StateHasChanged();
    }

    private void HandleImageLoad(Image image) {
        loadedImages = loadedImages.Append(image).ToArray();
        if (loadedImages.Length == images.Length) {
            allImagesLoaded = true;
            StateHasChanged();
        }
    }
}