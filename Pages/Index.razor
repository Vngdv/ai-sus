@page "/"
@using ImageSus.Models;
@using ImageSus.Services;
@inject ImageService ImageService;
@inject HttpClient Http;
@using System.Net.Http.Json;

<div class="page">
    <div class="container">
        <h1 class="find-titel">Find the Fake</h1>
        <h2 class="find-subtitel">Score @score</h2>
        <p class="find-subtitel">Loading @((loadedImages.Length/9.0*100).ToString("#.##"))%</p>
        <div class="find-grid" >
            @foreach (var image in @images)
            {
                <div class="image-container @(allImagesLoaded ? "" : "hidden")">
                    <img alt="hmm" @onload="@(() => HandleImageLoad(image))" src="@image.Link" @onclick="@(e => SelectSus(image))" class="@ComputeImageClasses(image)">
                    @if(solved && image.IsSus) {
                        <p class="imposter">ඞ</p>
                    }
                </div>
            }
        </div>
        <div class="button-container">
            <button @onclick="Solve" class="button" style="@((selectedId == null || solved) ? "display: none" : "")">Solve</button>
            <button @onclick="Reload" class="button">Refresh</button>
            <p class="cat-fact">@catFact</p>
        </div>
    </div>
</div>

@code {
    private Image[] images = new Image[]{};

    private string? catFact;

    private Image[] loadedImages = new Image[]{};

    private bool allImagesLoaded = false;

    private int? selectedId;

    private bool solved;

    private int score = 0;

    protected override async Task OnInitializedAsync()
    {
        // Load all of the images on startup
        await Reload();
    }

    // Reloads/Loads the current data
    private async Task Reload()
    {
        // Clear loaded images
        loadedImages = new Image[]{};
        allImagesLoaded = false;

        //Load CatFact
        var jsonResult = await Http.GetFromJsonAsync<CatFactResponse>("https://catfact.ninja/fact");
        if(jsonResult == null) 
            throw new Exception("Could not load cat fact");
        catFact = jsonResult.fact;

        var realImages = await ImageService.GetImageAsync(count: 8, isSus: false);
        var susImages = await ImageService.GetImageAsync(count: 1, isSus: true);
        images = realImages.Concat(susImages).ToArray();
        var rng = new Random();
        images = realImages
            .Concat(susImages)
            .OrderBy(_ => rng.Next())
            .ToArray();

        solved = false;
        StateHasChanged();
    }

    // This returns the css class a image should have
    private string ComputeImageClasses(Image image)
    {
        string baseClass = "grid-element ";
        if(selectedId == image.Id)  {
            if(solved) {
              if (image.IsSus) {
                return baseClass + "correct";
              }
              return baseClass + "incorrect";
            }
            return baseClass + "selected";
        }
        return baseClass;
    }

    // Sets the selected image
    private void SelectSus(Image image)
    {
        if (solved) return;
        selectedId = image.Id;
    }

    // Solves the current game and updates the score
    private void Solve()
    {
        solved = true;

        if(images.First(i => i.Id == selectedId).IsSus) {
            score++;
        } else {
            score = 0;
        }
    }

    // This handles the image loading logic that shows / hides the images
    private void HandleImageLoad(Image image) 
    {
        loadedImages = loadedImages.Append(image).ToArray();
        if (loadedImages.Length == images.Length) {
            allImagesLoaded = true;
        }
        Console.WriteLine($"Loaded {loadedImages.Length} of {images.Length} {loadedImages.Length/9.0*100}");
        // We place this here so that the loading text is updated
        @* StateHasChanged(); *@
    }
}